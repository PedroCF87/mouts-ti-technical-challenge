{
	"info": {
		"_postman_id": "c2a9af47-a348-404e-b290-35a471a8f5e9",
		"name": "Mouts TI - Technical challenge",
		"description": "This Postman collection contains a complete set of RESTful API requests for managing users in the system.  \n  \nIt includes endpoints for creating, retrieving, updating, and deleting users, and is designed to work with a NestJS backend running on `http://localhost:3001`.\n\nIdeal for testing and validating the User CRUD functionality during local development.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9765399",
		"_collection_link": "https://pedrofsti-devs.postman.co/workspace/Delfos-App~2ee93faa-3686-4753-b56d-aff2d00f8d21/collection/9765399-c2a9af47-a348-404e-b290-35a471a8f5e9?action=share&source=collection_link&creator=9765399"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"// âœ… Verifica se a resposta retornou status 200",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// âœ… Verifica se o corpo da resposta contÃ©m access_token",
									"pm.test(\"Response contains access token\", function () {",
									"  pm.expect(jsonData).to.have.property(\"access_token\");",
									"  pm.expect(jsonData.access_token).to.be.a(\"string\").and.not.be.empty;",
									"});",
									"",
									"// âœ… Verifica se o corpo da resposta contÃ©m refresh_token",
									"pm.test(\"Response contains refresh token\", function () {",
									"  pm.expect(jsonData).to.have.property(\"refresh_token\");",
									"  pm.expect(jsonData.refresh_token).to.be.a(\"string\").and.not.be.empty;",
									"});",
									"",
									"// ðŸ’¾ Salva os tokens como variÃ¡veis de ambiente",
									"pm.environment.set(\"access_token\", jsonData.access_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"johndoe\",\n    \"password\": \"your_password_here\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"// âœ… Verifica status HTTP",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// âœ… Verifica se um novo access token foi retornado",
									"pm.test(\"Response contains new access token\", function () {",
									"  pm.expect(jsonData).to.have.property(\"access_token\");",
									"  pm.expect(jsonData.access_token).to.be.a(\"string\").and.not.be.empty;",
									"});",
									"",
									"// âœ… Atualiza variÃ¡vel de ambiente com novo access token",
									"pm.environment.set(\"access_token\", jsonData.access_token);",
									"",
									"// âœ… (Opcional) Se tambÃ©m retorna novo refresh_token",
									"if (jsonData.refresh_token) {",
									"  pm.test(\"Response contains new refresh token\", function () {",
									"    pm.expect(jsonData.refresh_token).to.be.a(\"string\").and.not.be.empty;",
									"    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"  });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"your_refresh_token_here\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/refresh",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// âœ… Verifica se o logout foi bem-sucedido",
									"pm.test(\"Status code is 200 or 204\", function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"// âœ… (Opcional) Confirma que o refresh_token foi aceito e logout foi processado",
									"pm.test(\"Logout success response\", function () {",
									"  const body = pm.response.text();",
									"  pm.expect(body.toLowerCase()).to.include(\"success\");",
									"});",
									"",
									"// ðŸ§¹ Limpa os tokens do ambiente apÃ³s logout",
									"pm.environment.unset(\"access_token\");",
									"pm.environment.unset(\"refresh_token\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"your_refresh_token_here\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains authentication-related endpoints.  \n  \nUse these routes to log in with valid credentials and receive an authentication token (e.g. JWT), which can then be used to access protected resources in the system."
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"// âœ… Verifica se a resposta tem status 201",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"// âœ… Verifica se a resposta contÃ©m os dados esperados",
									"pm.test(\"Response contains user data\", function () {",
									"  pm.expect(jsonData).to.have.property(\"id\");",
									"  pm.expect(jsonData).to.have.property(\"name\", \"New User\");",
									"  pm.expect(jsonData).to.have.property(\"email\", \"newuser@example.com\");",
									"});",
									"",
									"// ðŸ’¾ Armazena o ID do usuÃ¡rio criado (Ãºtil para os testes seguintes: GET, PUT, DELETE)",
									"pm.environment.set(\"created_user_id\", jsonData.id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"New User\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"// âœ… Verifica se o status da resposta Ã© 200",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// âœ… Verifica se a resposta Ã© um array",
									"pm.test(\"Response is an array\", function () {",
									"  pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"// âœ… Verifica se o array contÃ©m ao menos um usuÃ¡rio (opcional, depende do estado do banco)",
									"pm.test(\"Contains at least one user\", function () {",
									"  pm.expect(jsonData.length).to.be.above(0);",
									"});",
									"",
									"// âœ… (Opcional) Verifica se o usuÃ¡rio criado estÃ¡ presente na lista",
									"const createdUserId = pm.environment.get(\"created_user_id\");",
									"if (createdUserId) {",
									"  const userFound = jsonData.some(user => user.id == createdUserId);",
									"  pm.test(\"Created user is present in the list\", function () {",
									"    pm.expect(userFound).to.be.true;",
									"  });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"const expectedId = pm.environment.get(\"created_user_id\");",
									"",
									"// âœ… Verifica se o status da resposta Ã© 200",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// âœ… Verifica se os dados do usuÃ¡rio retornado sÃ£o vÃ¡lidos",
									"pm.test(\"Returned user has correct ID\", function () {",
									"  pm.expect(jsonData).to.have.property(\"id\", parseInt(expectedId));",
									"  pm.expect(jsonData).to.have.property(\"name\");",
									"  pm.expect(jsonData).to.have.property(\"email\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/:userID",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "{{created_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"const expectedId = pm.environment.get(\"created_user_id\");",
									"",
									"// âœ… Verifica se o status Ã© 200 (ou altere para 204 se nÃ£o retornar corpo)",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// âœ… Verifica se o ID continua o mesmo",
									"pm.test(\"User ID remains unchanged\", function () {",
									"  pm.expect(jsonData).to.have.property(\"id\", parseInt(expectedId));",
									"});",
									"",
									"// âœ… Verifica se os dados foram atualizados corretamente",
									"pm.test(\"User data updated\", function () {",
									"  pm.expect(jsonData).to.have.property(\"name\", \"Updated User\");",
									"  pm.expect(jsonData).to.have.property(\"email\", \"updateduser@example.com\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated User\",\n  \"email\": \"updateduser@example.com\"\n}"
						},
						"url": {
							"raw": "{{host}}/users/:userID",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "{{created_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"",
									"// âœ… Verifica se o status da resposta Ã© 204 ou 200",
									"pm.test(\"Status code is 204 or 200\", function () {",
									"  pm.expect(status).to.be.oneOf([200, 204]);",
									"});",
									"",
									"// âœ… (Opcional) Se retornar uma mensagem de confirmaÃ§Ã£o",
									"if (status === 200) {",
									"  const jsonData = pm.response.json();",
									"  pm.test(\"Response contains confirmation message\", function () {",
									"    pm.expect(jsonData.message || jsonData.msg || \"\").to.match(/(deleted|success|remov)/i);",
									"  });",
									"}",
									"",
									"// ðŸ§¹ Remove a variÃ¡vel do ID, jÃ¡ que o usuÃ¡rio foi deletado",
									"pm.environment.unset(\"created_user_id\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/:userID",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "{{created_user_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:3001",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "created_user_id",
			"value": "",
			"type": "string"
		}
	]
}